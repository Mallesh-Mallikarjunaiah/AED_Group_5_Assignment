/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.AdminRole;


import Model.Department;
import Model.Faculty;
import Model.Student;
import Model.User.UserAccount;
import Model.User.UserAccountDirectory;
import Model.PersonService; // Use the Person Service for updates
import Model.accesscontrol.DataValidator; // For input validation
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import java.util.Arrays;
/**
 *
 * @author gagan
 */
public class StudentFacultySearchJPanel extends javax.swing.JPanel {

    private UserAccountDirectory accountDirectory;
    private UserAccount selectedAccount;
    private PersonService personService; // Service layer for updates

    public StudentFacultySearchJPanel(UserAccountDirectory accountDirectory) {
        initComponents();
        this.accountDirectory = accountDirectory;
        this.personService = new PersonService(accountDirectory); // Initialize service
        initializeComponents();
        populateTable();
    }

    private void initializeComponents() {
        // Populate Department ComboBox
        comboxDepartment.removeAllItems();
        Arrays.stream(Department.values()).forEach(d -> comboxDepartment.addItem(d.toString()));
        
        setFieldsEditable(false);
        btnSave.setEnabled(false);
        btnEdit.setEnabled(false);
    }

    private void populateTable() {
        if (accountDirectory == null) return;

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        List<UserAccount> accounts = personService.getStudentFacultyAccounts();

        for(UserAccount account : accounts) {
            Object[] row = new Object[7];
            row[0] = account.getProfile().getPerson().getUNID();
            row[1] = account.getProfile().getPerson().getName();
            row[2] = account.getProfile() instanceof Student ? "Student" : "Faculty";
            
            // Get Department (Handles both Student and Faculty Profile types)
            String deptName = "";
            if(account.getProfile() instanceof Student student) {
                deptName = student.getDepartment().toString();
            } else if (account.getProfile() instanceof Faculty faculty) {
                deptName = faculty.getDepartment().toString();
            }
            row[3] = deptName;
            
            row[4] = account.getProfile().getPerson().getEmail();
            row[5] = account.getProfile().getPerson().getContactNumber();
            row[6] = account.getProfile().isActive() ? "Active" : "Inactive";
            model.addRow(row);
        }
    }

    private void populateTableWithAccounts(java.util.List<UserAccount> accounts) {
        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (UserAccount account : accounts) {
            if (!(account.getProfile() instanceof Student) && !(account.getProfile() instanceof Faculty)) continue;
            Object[] row = new Object[7];
            row[0] = account.getProfile().getPerson().getUNID();
            row[1] = account.getProfile().getPerson().getName();
            row[2] = account.getProfile() instanceof Student ? "Student" : "Faculty";
            
            String deptName = "";
            if (account.getProfile() instanceof Student student) {
                deptName = student.getDepartment().toString();
            } else if (account.getProfile() instanceof Faculty faculty) {
                deptName = faculty.getDepartment().toString();
            }
            row[3] = deptName;
            
            row[4] = account.getProfile().getPerson().getEmail();
            row[5] = account.getProfile().getPerson().getContactNumber();
            row[6] = account.getProfile().isActive() ? "Active" : "Inactive";
            model.addRow(row);
        }
    }

    private void setFieldsEditable(boolean editable) {
        // Only allow Department edit if it's a Faculty member
        boolean canEditDept = editable && selectedAccount != null && selectedAccount.getProfile() instanceof Faculty;
        comboxDepartment.setEnabled(canEditDept); 
        
        txtEmail.setEditable(editable);
        txtContactNumber.setEditable(editable);
        // Academic status is read-only in this system design for consistency
        txtAcademicStatus.setEditable(false); 
    }

    private void clearFields() {
        comboxDepartment.setSelectedIndex(0);
        txtEmail.setText("");
        txtContactNumber.setText("");
        txtAcademicStatus.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearchID = new javax.swing.JButton();
        btnSearchName = new javax.swing.JButton();
        btnSearchDepartment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearch = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        lblDepartment = new javax.swing.JLabel();
        comboxDepartment = new javax.swing.JComboBox<>();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblContactNumber = new javax.swing.JLabel();
        txtContactNumber = new javax.swing.JTextField();
        txtAcademicStatus = new javax.swing.JTextField();
        lblAcademicStatus = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        txtSearchField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 255, 204));
        setMaximumSize(new java.awt.Dimension(600, 465));
        setMinimumSize(new java.awt.Dimension(600, 465));

        btnSearchID.setText("Search ID");
        btnSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIDActionPerformed(evt);
            }
        });

        btnSearchName.setText("Search Name");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });

        btnSearchDepartment.setText("Search Department");
        btnSearchDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDepartmentActionPerformed(evt);
            }
        });

        tblSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "UNID", "Name", "Role", "Department", "E-Mail", "Contact #", "Academic Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSearch);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        lblDepartment.setText("Department");

        comboxDepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblEmail.setText("E-Mail");

        lblContactNumber.setText("Contact Number");

        lblAcademicStatus.setText("Academic Status");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSearchField)
                .addGap(18, 18, 18)
                .addComponent(btnSearchID)
                .addGap(18, 18, 18)
                .addComponent(btnSearchName)
                .addGap(18, 18, 18)
                .addComponent(btnSearchDepartment)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                        .addComponent(btnEdit)
                        .addGap(88, 88, 88)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblContactNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblAcademicStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmail)
                            .addComponent(comboxDepartment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtContactNumber)
                            .addComponent(txtAcademicStatus))))
                .addGap(130, 130, 130))
            .addGroup(layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(btnSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchID)
                    .addComponent(btnSearchName)
                    .addComponent(btnSearchDepartment)
                    .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView)
                    .addComponent(btnDelete)
                    .addComponent(btnEdit))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDepartment)
                    .addComponent(comboxDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContactNumber)
                    .addComponent(txtContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtAcademicStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAcademicStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        int selectedRow = tblSearch.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }

        int unid = Integer.parseInt(tblSearch.getValueAt(selectedRow, 0).toString());
        
        // Find the selected account using the UNID
        selectedAccount = accountDirectory.findUserAccount(String.valueOf(unid)); 

        if (selectedAccount != null) {
            String role = (String) tblSearch.getValueAt(selectedRow, 2);
            String deptName = (String) tblSearch.getValueAt(selectedRow, 3);
            
            // Set Department ComboBox
            comboxDepartment.setSelectedItem(deptName);

            // Populate Text Fields
            txtEmail.setText(selectedAccount.getProfile().getPerson().getEmail());
            txtContactNumber.setText(selectedAccount.getProfile().getPerson().getContactNumber());
            txtAcademicStatus.setText(selectedAccount.getProfile().isActive() ? "Active" : "Inactive");
            
            // Set UI state
            setFieldsEditable(false);
            btnSave.setEnabled(false);
            btnView.setEnabled(false);
            btnDelete.setEnabled(true);
            btnEdit.setEnabled(true);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if (selectedAccount == null) {
            JOptionPane.showMessageDialog(this, "Please view a record first");
            return;
        }
        setFieldsEditable(true);
        btnSave.setEnabled(true);
        btnView.setEnabled(false);
        btnEdit.setEnabled(false);
        btnDelete.setEnabled(false);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblSearch.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this user?", "Confirm Delete", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        
        if (confirm == JOptionPane.YES_OPTION) {
            int unid = Integer.parseInt(tblSearch.getValueAt(selectedRow, 0).toString());
            UserAccount accountToRemove = accountDirectory.findUserAccount(String.valueOf(unid));
            
            if (accountToRemove != null) {
                accountDirectory.getUserAccountList().remove(accountToRemove);
                populateTable();
                clearFields();
                selectedAccount = null;
                JOptionPane.showMessageDialog(this, "User deleted successfully");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (selectedAccount == null) return;

        String newEmail = txtEmail.getText();
        String newContact = txtContactNumber.getText();
        String newDeptString = (String) comboxDepartment.getSelectedItem();
        
        // Input Validation Check (Assignment requirement)
        if (!DataValidator.isNotEmpty(newEmail) || !DataValidator.isNotEmpty(newContact)) {
            JOptionPane.showMessageDialog(this, "E-mail and Contact Number cannot be empty.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        Department newDept = Department.valueOf(newDeptString);

        // Call PersonService to update the profile (SAFE UPDATE)
        personService.updatePersonProfile(
            selectedAccount,
            newEmail,
            newContact,
            newDept
        );

        // Refresh table and reset UI
        populateTable();
        clearFields();
        setFieldsEditable(false);
        btnSave.setEnabled(false);
        btnEdit.setEnabled(true);
        btnDelete.setEnabled(true);
        btnView.setEnabled(true);
        selectedAccount = null;

        JOptionPane.showMessageDialog(this, "Record updated successfully");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchFieldActionPerformed

    private void btnSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIDActionPerformed
        if (accountDirectory == null) { JOptionPane.showMessageDialog(this, "No data available to search."); return; }

        String query = txtSearchField.getText().trim();
        if (query.isEmpty()) { JOptionPane.showMessageDialog(this, "Please enter an ID to search."); return; }

        try { Integer.parseInt(query); } 
        catch (NumberFormatException ex) { JOptionPane.showMessageDialog(this, "Please enter a valid numeric ID."); return; }

        // Find matches by UNID
        java.util.List<UserAccount> matches = new java.util.ArrayList<>();
        for (UserAccount account : personService.getStudentFacultyAccounts()) {
            if (String.valueOf(account.getProfile().getPerson().getUNID()).equals(query)) {
                matches.add(account);
            }
        }
        populateTableWithAccounts(matches);
        clearFields();
        selectedAccount = null;
    }//GEN-LAST:event_btnSearchIDActionPerformed

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        if (accountDirectory == null) { JOptionPane.showMessageDialog(this, "No data available to search."); return; }

        String query = txtSearchField.getText().trim();
        if (query.isEmpty()) { JOptionPane.showMessageDialog(this, "Please enter a name to search."); return; }

        String qLower = query.toLowerCase();
        java.util.List<UserAccount> matches = new java.util.ArrayList<>();
        for (UserAccount account : personService.getStudentFacultyAccounts()) {
            String name = account.getProfile().getPerson().getName();
            if (name != null && name.toLowerCase().contains(qLower)) {
                matches.add(account);
            }
        }
        populateTableWithAccounts(matches);
        clearFields();
        selectedAccount = null;
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void btnSearchDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDepartmentActionPerformed
        if (accountDirectory == null) { JOptionPane.showMessageDialog(this, "No data available to search."); return; }

        String query = txtSearchField.getText().trim();
        if (query.isEmpty()) { JOptionPane.showMessageDialog(this, "Please enter a department to search."); return; }

        String qUpper = query.toUpperCase(); // Departments are stored as uppercase enums
        java.util.List<UserAccount> matches = new java.util.ArrayList<>();
        
        for (UserAccount account : personService.getStudentFacultyAccounts()) {
            String deptStr = "";
            if (account.getProfile() instanceof Student student) {
                deptStr = student.getDepartment().toString();
            } else if (account.getProfile() instanceof Faculty faculty) {
                deptStr = faculty.getDepartment().toString();
            }
            
            if (deptStr != null && deptStr.contains(qUpper)) {
                matches.add(account);
            }
        }
        populateTableWithAccounts(matches);
        clearFields();
        selectedAccount = null;
    }//GEN-LAST:event_btnSearchDepartmentActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearchDepartment;
    private javax.swing.JButton btnSearchID;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> comboxDepartment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAcademicStatus;
    private javax.swing.JLabel lblContactNumber;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JTable tblSearch;
    private javax.swing.JTextField txtAcademicStatus;
    private javax.swing.JTextField txtContactNumber;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtSearchField;
    // End of variables declaration//GEN-END:variables
}
